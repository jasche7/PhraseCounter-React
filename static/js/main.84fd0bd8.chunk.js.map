{"version":3,"sources":["components/Textbox/Textbox.js","components/Display/Display.js","components/Phrases/Phrase.js","components/Phrases/PhraseList.js","components/Layout/Layout.js","reportWebVitals.js","index.js"],"names":["Textbox","props","useState","text","setText","occurrences","setOccurrences","phrase","setPhrase","onSubmit","event","preventDefault","setPhraseCount","clickFunction","value","onChange","e","target","type","Display","Phrase","count","PhraseList","res","setRes","useEffect","active","phraseMaker","phraseCount","minOccurrences","maxPhraseLength","data","fetch","method","mode","headers","body","JSON","stringify","then","response","json","result","Object","entries","console","log","map","phrasecount","Layout","setActive","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sKA2CeA,EAzCC,SAACC,GAAW,IAAD,EACDC,qBADC,mBAClBC,EADkB,KACZC,EADY,OAEaF,mBAAS,GAFtB,mBAElBG,EAFkB,KAELC,EAFK,OAGGJ,mBAAS,GAHZ,mBAGlBK,EAHkB,KAGVC,EAHU,KAWzB,OACE,uBAAMC,SAPS,SAACC,GAChBA,EAAMC,iBACNV,EAAMW,eAAe,CAACT,EAAME,EAAaE,IACzCN,EAAMY,iBAIN,UACE,0CAEE,0BAAUC,MAAOX,EAAMY,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOH,aAG3D,qDAEE,uBACEI,KAAK,SACLJ,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAeU,EAAEC,OAAOH,aAI7C,uDAEE,uBACEI,KAAK,SACLJ,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,OAAOH,aAIxC,wBAAQI,KAAK,eC5BJC,EARC,SAAClB,GACf,OACE,mCACE,4BAAIA,EAAME,UCKDiB,EARA,SAACnB,GACd,OACE,gCACGA,EAAMM,OADT,KACmBN,EAAMoB,UC2CdC,EA7CI,SAACrB,GAClB,IAD4B,EAENC,mBAAS,IAFH,mBAErBqB,EAFqB,KAEhBC,EAFgB,KAgC5B,OAXAC,qBAAU,WACR,GAAIxB,EAAMyB,OAAQ,CAChB,IAAIC,EAAc,CAChBxB,KAAMF,EAAM2B,YAAY,GACxBC,eAAgB5B,EAAM2B,YAAY,GAClCE,gBAAiB7B,EAAM2B,YAAY,IAtBpBG,EAwBLJ,EAvBdK,MAJU,8CAIC,CACTC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,KAEjCC,KAAMC,KAAKC,UAAUP,KAEpBQ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLlB,EAAOmB,OAAOC,QAAQF,IACtBG,QAAQC,IAAIJ,MAbE,IAACX,IA0BlB,CAAC9B,EAAMyB,OAAQzB,EAAM2B,cAGtB,mCACGL,EAAIwB,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,CAEEzC,OAAQyC,EAAY,GACpB3B,MAAO2B,EAAY,IAFdA,EAAY,UClBZC,EAhBA,WAAO,IAAD,EACmB/C,mBAAS,IAD5B,mBACZ0B,EADY,KACChB,EADD,OAESV,oBAAS,GAFlB,mBAEZwB,EAFY,KAEJwB,EAFI,KAInB,OACE,qCACE,cAAC,EAAD,CACErC,cAAe,kBAAMqC,GAAU,IAC/BtC,eAAgBA,IAElB,cAAC,EAAD,CAAST,KAAMyB,EAAY,KAC3B,cAAC,EAAD,CAAYF,OAAQA,EAAQE,YAAaA,QCJhCuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.84fd0bd8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Textbox = (props) => {\n  const [text, setText] = useState();\n  const [occurrences, setOccurrences] = useState(0);\n  const [phrase, setPhrase] = useState(0);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.setPhraseCount([text, occurrences, phrase]);\n    props.clickFunction();\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Text:\n        <textarea value={text} onChange={(e) => setText(e.target.value)} />\n      </label>\n\n      <label>\n        Min Occurrences:\n        <input\n          type=\"number\"\n          value={occurrences}\n          onChange={(e) => setOccurrences(e.target.value)}\n        />\n      </label>\n\n      <label>\n        Max Phrase Length:\n        <input\n          type=\"number\"\n          value={phrase}\n          onChange={(e) => setPhrase(e.target.value)}\n        />\n      </label>\n\n      <button type=\"submit\" />\n    </form>\n  );\n};\n\nexport default Textbox;\n","import React from \"react\";\n\nconst Display = (props) => {\n  return (\n    <>\n      <p>{props.text}</p>\n    </>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\n\nconst Phrase = (props) => {\n  return (\n    <div>\n      {props.phrase}: {props.count}\n    </div>\n  );\n};\n\nexport default Phrase;\n","import React, { useEffect, useState } from \"react\";\nimport Phrase from \"./Phrase\";\n\nconst PhraseList = (props) => {\n  const url = \"https://phrase-counter.herokuapp.com/phrase\";\n  const [res, setRes] = useState([]);\n\n  const makeRequest = (data) => {\n    fetch(url, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((response) => response.json())\n      .then((result) => {\n        setRes(Object.entries(result));\n        console.log(result);\n      });\n  };\n\n  useEffect(() => {\n    if (props.active) {\n      let phraseMaker = {\n        text: props.phraseCount[0],\n        minOccurrences: props.phraseCount[1],\n        maxPhraseLength: props.phraseCount[2],\n      };\n      makeRequest(phraseMaker);\n    }\n  }, [props.active, props.phraseCount]);\n\n  return (\n    <>\n      {res.map((phrasecount) => (\n        <Phrase\n          key={phrasecount[0]}\n          phrase={phrasecount[0]}\n          count={phrasecount[1]}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PhraseList;\n","import React, { useState } from \"react\";\nimport Textbox from \"../Textbox/Textbox\";\nimport Display from \"../Display/Display\";\nimport PhraseList from \"../Phrases/PhraseList\";\n\nconst Layout = () => {\n  const [phraseCount, setPhraseCount] = useState([]);\n  const [active, setActive] = useState(false);\n\n  return (\n    <>\n      <Textbox\n        clickFunction={() => setActive(true)}\n        setPhraseCount={setPhraseCount}\n      />\n      <Display text={phraseCount[0]} />\n      <PhraseList active={active} phraseCount={phraseCount} />\n    </>\n  );\n};\n\nexport default Layout;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './components/Layout/Layout';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Layout />, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}