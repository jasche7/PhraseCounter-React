{"version":3,"sources":["components/Textbox.js","components/Display.js","components/Phrases/Phrase.js","components/Phrases/PhraseList.js","components/Header.js","components/Layout.js","reportWebVitals.js","index.js"],"names":["Textbox","props","useState","text","setText","occurrences","setOccurrences","phrase","setPhrase","loading","Form","onSubmit","event","preventDefault","setPhraseCount","clickFunction","Group","controlId","Label","Control","required","as","placeholder","maxlength","onChange","e","target","value","Text","className","Row","style","display","Col","type","Button","disabled","Display","Phrase","count","PhraseList","url","init","setInit","res","setRes","setLoading","phraseCount","active","useEffect","data","fetch","catch","console","log","phraseMaker","minOccurrences","maxPhraseLength","method","mode","headers","body","JSON","stringify","then","response","json","result","Object","entries","err","code","message","stack","Spinner","animation","role","map","phrasecount","Header","Layout","setActive","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.135aee8c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Textbox = (props) => {\n  const [text, setText] = useState();\n  const [occurrences, setOccurrences] = useState(2);\n  const [phrase, setPhrase] = useState(0);\n  const loading = props.loading;\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.setPhraseCount([text, occurrences, phrase]);\n    props.clickFunction();\n  };\n\n  const submitButton = () => {\n    if (loading) {\n      return <Button disabled>Submit</Button>;\n    } else {\n      return <Button type=\"submit\">Submit</Button>;\n    }\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group controlId=\"formText\">\n        <Form.Label>Text</Form.Label>\n        <Form.Control\n          required\n          as=\"textarea\"\n          placeholder=\"Enter text\"\n          maxlength=\"5000\"\n          onChange={(e) => setText(e.target.value)}\n        />\n        <Form.Text className=\"text-muted\">5000 characters max</Form.Text>\n      </Form.Group>\n      <Row style={{ display: \"flex\" }}>\n        <Col>\n          <Form.Group controlId=\"formText\">\n            <Form.Label>Min Occurrences:</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={occurrences}\n              onChange={(e) => setOccurrences(e.target.value)}\n            />\n          </Form.Group>\n        </Col>\n\n        <Col>\n          <Form.Group controlId=\"formText\">\n            <Form.Label>Max Phrase Length:</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={phrase}\n              onChange={(e) => setPhrase(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Text className=\"text-muted\">0 for no max</Form.Text>\n        </Col>\n\n        <Col className=\"my-auto\">{submitButton()}</Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Textbox;\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\n\nconst Display = (props) => {\n  return (\n    <Form>\n      <Form.Group controlId=\"display\">\n        <Form.Label>Display Text</Form.Label>\n        <Form.Control required as=\"textarea\" value={props.text} disabled />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\n\nconst Phrase = (props) => {\n  return (\n    <div>\n      {props.phrase}: {props.count}\n    </div>\n  );\n};\n\nexport default Phrase;\n","import React, { useEffect, useState } from \"react\";\nimport Phrase from \"./Phrase\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst PhraseList = (props) => {\n  const url = \"https://phrase-counter.herokuapp.com\";\n  const [init, setInit] = useState(false);\n  const [res, setRes] = useState([]);\n  const loading = props.loading;\n  const setLoading = props.setLoading;\n  const phraseCount = props.phraseCount;\n  const active = props.active;\n\n  const makePhrases = () => {\n    if (loading) {\n      return (\n        <>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        </>\n      );\n    } else {\n      return res.map((phrasecount) => (\n        <Phrase\n          key={phrasecount[0]}\n          phrase={phrasecount[0]}\n          count={phrasecount[1]}\n        />\n      ));\n    }\n  };\n\n  useEffect(() => {\n    const wakeUp = () => {\n      setLoading(true);\n      fetch(url).catch(() => {\n        setLoading(false);\n        console.log(\"Sent wake-up request to server\");\n      });\n    };\n\n    const makeRequest = (data) => {\n      setLoading(true);\n      fetch(url + \"/phrase\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      })\n        .then((response) => response.json())\n        .then((result) => {\n          setRes(Object.entries(result));\n          setLoading(false);\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(err.code);\n          console.log(err.message);\n          console.log(err.stack);\n        });\n    };\n\n    if (!init) {\n      wakeUp();\n      setInit(true);\n    }\n\n    if (active) {\n      let phraseMaker = {\n        text: phraseCount[0],\n        minOccurrences: phraseCount[1],\n        maxPhraseLength: phraseCount[2],\n      };\n      makeRequest(phraseMaker);\n    }\n  }, [active, init, phraseCount, setLoading]);\n\n  return <>{makePhrases()}</>;\n};\n\nexport default PhraseList;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <>\n      <h3>Phrase Counter</h3>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport Textbox from \"./Textbox\";\nimport Display from \"./Display\";\nimport PhraseList from \"./Phrases/PhraseList\";\nimport Header from \"./Header\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Layout = () => {\n  const [phraseCount, setPhraseCount] = useState([]);\n  const [active, setActive] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Header />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Textbox\n            clickFunction={() => setActive(true)}\n            setPhraseCount={setPhraseCount}\n            loading={loading}\n          />\n        </Col>\n        <Col>\n          <Display className=\"display-box\" text={phraseCount[0]} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <PhraseList\n            active={active}\n            loading={loading}\n            setLoading={setLoading}\n            phraseCount={phraseCount}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Layout;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Layout from \"./components/Layout\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<Layout />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}