{"version":3,"sources":["components/Textbox.js","components/Display.js","components/Phrases/Phrase.js","components/Phrases/PhraseService.js","components/Phrases/PhraseList.js","components/Header.js","components/Layout.js","reportWebVitals.js","index.js"],"names":["Textbox","props","useState","text","setText","occurrences","setOccurrences","phrase","setPhrase","caseSensitive","setCaseSensitive","ignoringPunctuation","setIgnoringPunctuation","loading","Form","onSubmit","event","preventDefault","setRequestBody","clickFunction","Group","controlId","Label","Control","required","as","placeholder","maxLength","value","onChange","e","target","Text","className","Row","style","display","Col","type","OverlayTrigger","overlay","Tooltip","Check","label","defaultChecked","checked","Button","disabled","Display","rows","Phrase","count","url","phraseRequest","data","a","fetch","method","mode","headers","body","JSON","stringify","result","console","log","json","errorStates","PhraseList","APIInit","setAPIInit","phrases","setPhrases","errorState","setErrorState","APILoading","setAPILoading","setLoading","requestBody","active","useEffect","catch","phraseMaker","minOccurrences","maxPhraseLength","phraseService","then","status","Object","entries","err","error","message","finally","Spinner","animation","role","map","makePhrases","Header","Layout","setActive","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c6853fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n/**\n * Controlled form for creating PhraseCount request.\n * @param {*} props contains the following parameters:\n * clickFunction - sets active flag to true, enabling PhraseList to make API calls\n * setRequestBody - setter function for storing PhraseCount request body\n * loading - disables submit button when waiting for PhraseList API call to resolve\n */\nconst Textbox = (props) => {\n  const [text, setText] = useState();\n  const [occurrences, setOccurrences] = useState(2); //default value 2 to omit single words\n  const [phrase, setPhrase] = useState(5); //default value 5 for performance\n  const [caseSensitive, setCaseSensitive] = useState(false);\n  const [ignoringPunctuation, setIgnoringPunctuation] = useState(false);\n  const loading = props.loading;\n\n  /**\n   * Disables form submit default behavior of refreshing page. Sets the requestBody for PhraseCount and\n   * sets the active flag to allow PhraseList API calls.\n   * @param {*} event form submit event\n   */\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.setRequestBody([\n      text,\n      occurrences,\n      phrase,\n      caseSensitive,\n      ignoringPunctuation,\n    ]);\n    props.clickFunction();\n  };\n\n  /**\n   * Submit button for form; disables when loading from PhraseList API call.\n   */\n  const submitButton = () => {\n    if (loading) {\n      return <Button disabled>Submit</Button>;\n    } else {\n      return <Button type=\"submit\">Submit</Button>;\n    }\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group controlId=\"formText\">\n        <Form.Label>Text</Form.Label>\n        <Form.Control\n          required\n          as=\"textarea\"\n          placeholder=\"Enter text\"\n          maxLength=\"3000\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <Form.Text className=\"text-muted\">3000 characters max</Form.Text>\n      </Form.Group>\n      <Row style={{ display: \"flex\" }}>\n        <Col>\n          <Form.Group controlId=\"formText\">\n            <Form.Label>Min Occurrences:</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={occurrences}\n              onChange={(e) => setOccurrences(e.target.value)}\n            />\n          </Form.Group>\n        </Col>\n\n        <Col>\n          <Form.Group controlId=\"formText\">\n            <OverlayTrigger\n              overlay={<Tooltip>Keep low for faster, stabler results!</Tooltip>}\n            >\n              <Form.Label>Max Phrase Length:</Form.Label>\n            </OverlayTrigger>\n            <Form.Control\n              type=\"number\"\n              value={phrase}\n              onChange={(e) => setPhrase(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Text className=\"text-muted\">0 for no max</Form.Text>\n        </Col>\n\n        <Col>\n          <Row>\n            <Form.Group controlId=\"formCaseSensitive\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Case Sensitive\"\n                defaultChecked={caseSensitive}\n                onChange={(e) => setCaseSensitive(e.target.checked)}\n              />\n            </Form.Group>\n          </Row>\n          <Row>\n            <Form.Group controlId=\"formIgnoringPunctuation\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Ignore Punctuation\"\n                defaultChecked={ignoringPunctuation}\n                onChange={(e) => setIgnoringPunctuation(e.target.checked)}\n              />\n            </Form.Group>\n          </Row>\n        </Col>\n        <Col className=\"my-auto\">{submitButton()}</Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Textbox;\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\n\n/**\n * Displays requestBody's text content after submitting form from Textbox.\n * @param {*} props requestBody's text value\n */\nconst Display = (props) => {\n  return (\n    <Form>\n      <Form.Group controlId=\"display\">\n        <Form.Label>Display Text</Form.Label>\n        <Form.Control\n          required\n          as=\"textarea\"\n          value={props.text}\n          rows={8}\n          disabled\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\n\nconst Phrase = (props) => {\n  return (\n    <div>\n      {props.phrase}: {props.count}\n    </div>\n  );\n};\n\nexport default Phrase;\n","const url = \"https://phrase-counter.herokuapp.com\";\n\n/**\n * Sends wakeup HTTP request to Heroku dyno.\n */\nexport const wakeUp = () => {\n  fetch(url).catch(() => {\n    console.log(\"Sent wake-up request to server\");\n  });\n};\n\n/**\n * Makes POST request to Heroku dyno for PhraseCount, which will return a JSON object with phrases\n * and counts.\n * @param {*} data contains JSON object with PhraseCount's required parameters\n */\nexport const phraseRequest = async (data) => {\n  const result = await fetch(url + \"/phrase\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  console.log(result);\n  return result.json();\n};\n","import React, { useEffect, useState } from \"react\";\nimport Phrase from \"./Phrase\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport * as phraseService from \"./PhraseService.js\";\n\n/**\n * Error states related to PhraseService call.\n */\nconst errorStates = {\n  SERVER_DOWN: \"serverdown\",\n  BAD_REQUEST: \"badrequest\",\n};\n\n/**\n * PhraseList component makes call to PhraseService and generates Phrase components based\n * on return value.\n * @param {*} props contains the following parameters:\n * active - once Textbox form has been submitted once, set to true so that PhraseService can be called\n * loading - while waiting for a response from PhraseService, set to true so that Textbox form submit is disabled\n * setLoading - useState setter for loading\n * requestBody - parameters for PhraseService request, set by Textbox\n */\nconst PhraseList = (props) => {\n  const [APIInit, setAPIInit] = useState(false); //for initial API call (e.g. waking Heroku)\n  const [phrases, setPhrases] = useState([]);\n  const [errorState, setErrorState] = useState(false);\n  const APILoading = props.loading;\n  const setAPILoading = props.setLoading;\n  const requestBody = props.requestBody;\n  const active = props.active; //prevents sending API requests until form has been submitted once\n\n  /**\n   * Returns loading spinner if loading, error message if errorState, or else generated Phrase components.\n   */\n  const makePhrases = () => {\n    if (APILoading) {\n      return (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      );\n    } else if (errorState) {\n      switch (errorState) {\n        case errorStates.SERVER_DOWN:\n          return <p>Request failed. The server may be down.</p>;\n        case errorStates.BAD_REQUEST:\n          return <p>Request failed. Your request may be too long.</p>;\n        default:\n          return <p>Request failed.</p>;\n      }\n    } else {\n      return phrases.map((requestBody) => (\n        <Phrase\n          key={requestBody[0]}\n          phrase={requestBody[0]}\n          count={requestBody[1]}\n        />\n      ));\n    }\n  };\n\n  /**\n   * Calls API wakeUp function if not already called this session. If active and requestBody changes\n   * from new Textbox form submission, will make a new request to phraseService. setPhrases will generate\n   * Phrase components from the API response.\n   */\n  useEffect(() => {\n    if (!APIInit) {\n      phraseService.wakeUp();\n      setAPIInit(true);\n    }\n\n    const makeRequest = (data) => {\n      setAPILoading(true);\n      phraseService\n        .phraseRequest(data)\n        .then((result) => {\n          if (result && result.status === 500) {\n            setErrorState(errorStates.BAD_REQUEST);\n          } else if (result) {\n            setPhrases(Object.entries(result));\n            setErrorState(false);\n          }\n        })\n        .catch((err) => {\n          console.error(err.message);\n          setErrorState(errorStates.SERVER_DOWN);\n        })\n        .finally(setAPILoading(false));\n    };\n\n    if (active) {\n      let phraseMaker = {\n        text: requestBody[0],\n        minOccurrences: requestBody[1],\n        maxPhraseLength: requestBody[2],\n        caseSensitive: requestBody[3],\n        ignoringPunctuation: requestBody[4],\n      };\n      makeRequest(phraseMaker);\n    }\n  }, [active, APIInit, requestBody, setAPILoading]);\n\n  return <>{makePhrases()}</>; //returns either loading spinner, error, or current phrases\n};\n\nexport default PhraseList;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <>\n      <h3>Phrase Counter</h3>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport Textbox from \"./Textbox\";\nimport Display from \"./Display\";\nimport PhraseList from \"./Phrases/PhraseList\";\nimport Header from \"./Header\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n/**\n * Layout of PhraseCount page. Parent component for passing props.\n */\nconst Layout = () => {\n  const [requestBody, setRequestBody] = useState([]);\n  const [active, setActive] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Header />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Textbox\n            clickFunction={() => setActive(true)}\n            setRequestBody={setRequestBody}\n            loading={loading}\n          />\n        </Col>\n        <Col>\n          <Display className=\"display-box\" text={requestBody[0]} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <PhraseList\n            active={active}\n            loading={loading}\n            setLoading={setLoading}\n            requestBody={requestBody}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Layout;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Layout from \"./components/Layout\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<Layout />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}