{"version":3,"sources":["components/Textbox.js","components/Display.js","components/Phrases/Phrase.js","components/Phrases/PhraseList.js","components/Header.js","components/Layout.js","reportWebVitals.js","index.js"],"names":["Textbox","props","useState","text","setText","occurrences","setOccurrences","phrase","setPhrase","caseSensitive","setCaseSensitive","ignoringPunctuation","setIgnoringPunctuation","loading","Form","onSubmit","event","preventDefault","setRequestBody","clickFunction","Group","controlId","Label","Control","required","as","placeholder","maxLength","onChange","e","target","value","Text","className","Row","style","display","Col","type","OverlayTrigger","overlay","Tooltip","Check","label","defaultChecked","checked","Button","disabled","Display","rows","Phrase","count","PhraseList","url","init","setInit","res","setRes","errorState","setErrorState","setLoading","requestBody","active","useEffect","data","fetch","catch","console","log","phraseMaker","minOccurrences","maxPhraseLength","method","mode","headers","body","JSON","stringify","then","response","json","result","status","Object","entries","err","message","finally","Spinner","animation","role","map","makePhrases","Header","Layout","setActive","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34a79251.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Textbox = (props) => {\n  const [text, setText] = useState();\n  const [occurrences, setOccurrences] = useState(2);\n  const [phrase, setPhrase] = useState(5);\n  const [caseSensitive, setCaseSensitive] = useState(false);\n  const [ignoringPunctuation, setIgnoringPunctuation] = useState(false);\n  const loading = props.loading;\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.setRequestBody([\n      text,\n      occurrences,\n      phrase,\n      caseSensitive,\n      ignoringPunctuation,\n    ]);\n    props.clickFunction();\n  };\n\n  const submitButton = () => {\n    if (loading) {\n      return <Button disabled>Submit</Button>;\n    } else {\n      return <Button type=\"submit\">Submit</Button>;\n    }\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group controlId=\"formText\">\n        <Form.Label>Text</Form.Label>\n        <Form.Control\n          required\n          as=\"textarea\"\n          placeholder=\"Enter text\"\n          maxLength=\"3000\"\n          onChange={(e) => setText(e.target.value)}\n        />\n        <Form.Text className=\"text-muted\">3000 characters max</Form.Text>\n      </Form.Group>\n      <Row style={{ display: \"flex\" }}>\n        <Col>\n          <Form.Group controlId=\"formText\">\n            <Form.Label>Min Occurrences:</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={occurrences}\n              onChange={(e) => setOccurrences(e.target.value)}\n            />\n          </Form.Group>\n        </Col>\n\n        <Col>\n          <Form.Group controlId=\"formText\">\n            <OverlayTrigger\n              overlay={<Tooltip>Keep low for faster, stabler results!</Tooltip>}\n            >\n              <Form.Label>Max Phrase Length*:</Form.Label>\n            </OverlayTrigger>\n            <Form.Control\n              type=\"number\"\n              value={phrase}\n              onChange={(e) => setPhrase(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Text className=\"text-muted\">0 for no max</Form.Text>\n        </Col>\n\n        <Col>\n          <Row>\n            <Form.Group controlId=\"formCaseSensitive\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Case Sensitive\"\n                defaultChecked={caseSensitive}\n                onChange={(e) => setCaseSensitive(e.target.checked)}\n              />\n            </Form.Group>\n          </Row>\n          <Row>\n            <Form.Group controlId=\"formIgnoringPunctuation\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Ignore Punctuation\"\n                defaultChecked={ignoringPunctuation}\n                onChange={(e) => setIgnoringPunctuation(e.target.checked)}\n              />\n            </Form.Group>\n          </Row>\n        </Col>\n        <Col className=\"my-auto\">{submitButton()}</Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Textbox;\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\n\nconst Display = (props) => {\n  return (\n    <Form>\n      <Form.Group controlId=\"display\">\n        <Form.Label>Display Text</Form.Label>\n        <Form.Control\n          required\n          as=\"textarea\"\n          value={props.text}\n          rows={8}\n          disabled\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\n\nconst Phrase = (props) => {\n  return (\n    <div>\n      {props.phrase}: {props.count}\n    </div>\n  );\n};\n\nexport default Phrase;\n","import React, { useEffect, useState } from \"react\";\nimport Phrase from \"./Phrase\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst PhraseList = (props) => {\n  const url = \"https://phrase-counter.herokuapp.com\";\n  const [init, setInit] = useState(false);\n  const [res, setRes] = useState([]);\n  const [errorState, setErrorState] = useState(false);\n  const loading = props.loading;\n  const setLoading = props.setLoading;\n  const requestBody = props.requestBody;\n  const active = props.active;\n\n  const makePhrases = () => {\n    if (loading) {\n      return (\n        <>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        </>\n      );\n    } else if (errorState) {\n      switch (errorState) {\n        case 1:\n          return <p>Request failed. The server may be down.</p>;\n        case 2:\n          return <p>Request failed. Your request may be too long.</p>;\n        default:\n          return;\n      }\n    } else {\n      console.log(res);\n      return res.map((requestBody) => (\n        <Phrase\n          key={requestBody[0]}\n          phrase={requestBody[0]}\n          count={requestBody[1]}\n        />\n      ));\n    }\n  };\n\n  useEffect(() => {\n    const wakeUp = () => {\n      setLoading(true);\n      fetch(url).catch(() => {\n        setLoading(false);\n        console.log(\"Sent wake-up request to server\");\n      });\n    };\n\n    const makeRequest = (data) => {\n      setLoading(true);\n      fetch(url + \"/phrase\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      })\n        .then((response) => response.json())\n        .then((result) => {\n          if (result.status === 500) {\n            setErrorState(2);\n          } else {\n            setRes(Object.entries(result));\n            console.log(result.status);\n            setErrorState(false);\n          }\n        })\n        .catch((err) => {\n          console.log(err.message);\n          setErrorState(1);\n        })\n        .finally(setLoading(false));\n    };\n\n    if (!init) {\n      wakeUp();\n      setInit(true);\n    }\n\n    if (active) {\n      let phraseMaker = {\n        text: requestBody[0],\n        minOccurrences: requestBody[1],\n        maxPhraseLength: requestBody[2],\n        caseSensitive: requestBody[3],\n        ignoringPunctuation: requestBody[4],\n      };\n      makeRequest(phraseMaker);\n    }\n  }, [active, init, requestBody, setLoading]);\n\n  return <>{makePhrases()}</>;\n};\n\nexport default PhraseList;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <>\n      <h3>Phrase Counter</h3>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport Textbox from \"./Textbox\";\nimport Display from \"./Display\";\nimport PhraseList from \"./Phrases/PhraseList\";\nimport Header from \"./Header\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Layout = () => {\n  const [requestBody, setRequestBody] = useState([]);\n  const [active, setActive] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Header />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Textbox\n            clickFunction={() => setActive(true)}\n            setRequestBody={setRequestBody}\n            loading={loading}\n          />\n        </Col>\n        <Col>\n          <Display className=\"display-box\" text={requestBody[0]} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <PhraseList\n            active={active}\n            loading={loading}\n            setLoading={setLoading}\n            requestBody={requestBody}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Layout;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Layout from \"./components/Layout\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<Layout />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}